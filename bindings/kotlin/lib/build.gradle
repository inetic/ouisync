plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'org.jetbrains.dokka' version '1.9.0'
    id 'org.mozilla.rust-android-gradle.rust-android' version '0.9.3'
}


Properties localProperties = new Properties()

def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localProperties.load(localPropertiesFile.newDataInputStream())
}

def ouisyncVersionName = localProperties.getProperty("versionName")

android {
    compileSdkVersion 34

    // At time of writing, this is the LTS version
    ndkVersion '26.3.11579264'

    namespace 'org.equalitie.ouisync.lib'

    sourceSets {
        main {
            kotlin {
                // Add directory with generated source files
                srcDir layout.buildDirectory.dir('gen')
            }
        }
    }

    defaultConfig {
        targetSdkVersion 34
        minSdkVersion 21
        versionCode 1
        versionName ouisyncVersionName
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    testOptions {
        unitTests.all {
            testLogging {
                showStandardStreams true
                exceptionFormat "full"
            }
        }
    }
}

dependencies {
    def jna = 'net.java.dev.jna:jna:5.13.0'

    // We want the 'aar' version so the 'jnidispatch' lib gets bundled into the resulting aar.
    implementation "${jna}@aar"

    // For test we also want the non-aar version so the 'jnidispatch' lib gets put on the classpath
    testImplementation jna

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
    implementation 'org.msgpack:msgpack-core:0.9.5'

    testImplementation "junit:junit:4.13"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
}

cargo {
    module = "$rootDir/../.."
    libname = 'ouisync_ffi'

    // Targets can be overriden with "rust.targets" in local.properties.
    // Example: "rust.targets=arm64,x86_64".
    // More info: https://github.com/mozilla/rust-android-gradle.
    targets = ['arm', 'arm64', /* 'x86', */ 'x86_64']

    profile = 'release'

    extraCargoBuildArguments = ['--package', 'ouisync-ffi']

    // HACK: Recent NDK (since r23) no longer links `libgcc`, which breaks some libraries since
    // they depended on the symbols from `libclang_rt.builtins-x86_64-android`
    // (e.g. `__extenddftf2`, ...). To work around it, we link the library explicitly by setting
    // it through the RUSTFLAGS env variable.
    // More info: https://github.com/bbqsrc/cargo-ndk/issues/94.
    exec { spec, toolchain ->
        if (toolchain.target == 'x86_64-linux-android') {
            def clangVersion = '17'
            def libDir = "${android.sdkDirectory}/ndk/${android.ndkVersion}/toolchains/llvm/prebuilt/linux-x86_64/lib/clang/${clangVersion}/lib/linux"

            spec.environment('RUSTFLAGS', "-L${libDir} -lstatic=clang_rt.builtins-x86_64-android")
        }
    }
}

tasks.register('generateBindings', Exec) {
    description 'Generate bindings'
    workingDir "$rootDir/../.."
    commandLine 'cargo', 'run', '--package', 'ouisync-bindgen', '--', '--language', 'kotlin'

    doFirst {
        def dir = layout.buildDirectory.dir('gen').get().getAsFile()
        mkdir(dir)
        standardOutput = new FileOutputStream("$dir/Bindings.kt")
    }
}

tasks.register('cargoBuildUnitTest', Exec) {
    description 'Build the native library for unit tests'
    workingDir "$rootDir/../.."
    commandLine 'cargo', 'build', '--package', 'ouisync-ffi', '--lib'
}

afterEvaluate {
    android.libraryVariants.each {
        def variant  = it.name.capitalize()

        // Generate bindings before compiling the kotlin sources. This happens during both
        // 'assemble' and 'test'.
        tasks.named("compile${variant}Kotlin") {
            dependsOn 'generateBindings'
        }

        // Build the native library for tha target android platforms. This happens only during
        // 'assemble'
        tasks.named("merge${variant}JniLibFolders") {
            dependsOn 'cargoBuild'
        }

        // Built the native library for the host platform and set 'jna.library.path' to point to
        // it. This happens only during 'test'.
        tasks.named("test${variant}UnitTest") {
            dependsOn 'cargoBuildUnitTest'
            systemProperty('jna.library.path', "$rootDir/../../target/debug")
        }
    }

    tasks.named("dokkaHtml") {
        dependsOn 'generateBindings'
    }
}

ext {
    PUBLISH_GROUP_ID = 'ie.equalit.ouinet'
    PUBLISH_VERSION = "${ouisyncVersionName}"
    PUBLISH_ARTIFACT_ID = "ouisync-omni"
}

tasks.withType(Sign).configureEach {
    onlyIf { rootProject.gradle.startParameter.taskNames.contains('lib:publishToSonatype') }
}

apply from: "${rootProject.projectDir}/build-scripts/publish-module.gradle"
